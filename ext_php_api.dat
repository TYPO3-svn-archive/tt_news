a:2:{s:4:"meta";a:3:{s:5:"title";s:7:"tt_news";s:5:"descr";s:0:"";s:7:"options";a:2:{s:10:"usageCount";s:1:"1";s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:1:{s:14:"MD5_6cdbd68339";a:5:{s:8:"filename";s:22:"pi/class.tx_ttnews.php";s:8:"filesize";i:71723;s:6:"header";a:5:{s:4:"text";s:45:"

Plugin 'news' for the 'tt_news' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:36:"@author Rupert Germann <rupi@gmx.li>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tt_news";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:28:"Rupert Germann <rupi@gmx.li>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tt_news ";}}}s:3:"DAT";a:24:{i:1;a:8:{s:6:"header";s:38:"class tx_ttnews extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:5:{s:4:"text";s:45:"

Plugin 'news' for the 'tt_news' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:36:"@author Rupert Germann <rupi@gmx.li>";i:1;s:14:"@package TYPO3";i:2;s:19:"@subpackage tt_news";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:28:"Rupert Germann <rupi@gmx.li>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"tt_news ";}}}s:7:"content";a:2:{i:0;s:757:"	var $cObj; // The backReference to the mother cObj object set at call time
	// Default plugin variables:
	var $prefixId = 'tx_ttnews'; // Same as class name
	var $scriptRelPath = 'pi/class.tx_ttnews.php'; // Path to this script relative to the extension dir.
	var $extKey = 'tt_news'; // The extension key.
	var $tt_news_uid;
	var $conf;
	var $config;
	var $langArr;
	var $sys_language_mode;
	var $alternatingLayouts;
	var $allowCaching;
	var $catExclusive;
	var $arcExclusive;
	var $searchFieldList = 'short,bodytext,author,keywords,links,imagecaption,title';
	var $theCode = '';

	var $categories = array(); // Is initialized with the categories of the news system
	var $pageArray = array(); // Is initialized with an array of the pages in the pid-list
	";i:1;i:-1;}s:12:"content_size";i:757;s:13:"content_lines";i:19;s:6:"atLine";i:83;}i:3;a:7:{s:6:"header";s:44:"function main_xmlnewsfeed($content, $conf) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:57:"

this the old [DEPRECIATED] function for XML news feed.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"$content : ...";}i:1;a:2:{i:0;s:5:"array";i:1;s:35:"$conf : configuration array from TS";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"news content as xml string";}}s:7:"content";a:2:{i:0;s:342:"		$className = t3lib_div::makeInstanceClassName('t3lib_xml');
		$xmlObj = new $className('typo3_xmlnewsfeed');
		$xmlObj->setRecFields('tt_news', 'title,datetime'); // More fields here...
		$xmlObj->renderHeader();
		$xmlObj->renderRecords('tt_news', $this->getStoriesResult());
		$xmlObj->renderFooter();
		return $xmlObj->getResult();
	}

	";i:1;i:0;}s:12:"content_size";i:342;s:13:"content_lines";i:9;s:6:"atLine";i:110;}i:5;a:7:{s:6:"header";s:29:"function getStoriesResult() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:80:"

returns the db-result for the news-item displayed by the xmlnewsfeed function
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"pointer";i:1;s:41:"MySQL select result pointer / DBAL object";}}s:7:"content";a:2:{i:0;s:184:"		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('*', 'tt_news', 'pid=' . intval($GLOBALS['TSFE']->id) . $this->cObj->enableFields('tt_news'), '', 'datetime DESC');
		return $res;
	}

	";i:1;i:0;}s:12:"content_size";i:184;s:13:"content_lines";i:4;s:6:"atLine";i:125;}i:7;a:7:{s:6:"header";s:22:"function init($conf) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:90:"

Init Function: here all the needed configuration Values are stored in class variables..
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:35:"$conf : configuration array from TS";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->conf = $conf; //store configuration
		$this->pi_loadLL(); // Loading language-labels
		$this->pi_setPiVarDefaults(); // Set default piVars from TS
		$this->pi_initPIflexForm(); // Init FlexForm configuration for plugin
		$this->enableFields = $this->cObj->enableFields('tt_news');
		$this->tt_news_uid = intval($this->piVars['tt_news']); // Get the submitted uid of 
[...]
>conf['displayXML.']['dontInsertSiteUrl']){
			$this->config['siteUrl'] = t3lib_div::getIndpEnv('TYPO3_SITE_URL');
		}

	}

	";i:1;i:1;}s:12:"content_size";i:9012;s:13:"content_lines";i:154;s:6:"atLine";i:136;}i:9;a:7:{s:6:"header";s:37:"function main_news($content, $conf) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:141:"

Main news function: calls the init_news() function and decides by the given CODEs which of the
functions to display news should by called.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"$content : function output is added to this";}i:1;a:2:{i:0;s:5:"array";i:1;s:27:"$conf : configuration array";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"$content: complete content generated by the tt_news plugin";}}s:7:"content";a:2:{i:0;s:507:"		$this->local_cObj = t3lib_div::makeInstance('tslib_cObj'); // Local cObj.
		$this->init($conf);

		if ($this->conf['displayCurrentRecord']) {
			// added the possibility to change the template, used whe displaying news with the 'insert records' content-element. if the value is empty, the code is 'single'
			$this->config['code'] = $this->conf['defaultCode']?trim($this->c
[...]
ontent .= $this->cObj->substituteMarkerArray($helpTemplate, $markerArray);
				}
				break;
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2277;s:13:"content_lines";i:55;s:6:"atLine";i:299;}i:11;a:7:{s:6:"header";s:28:"function newsArchiveMenu() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:34:"

generates the News archive menu
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"html code of the archive menu";}}s:7:"content";a:2:{i:0;s:507:"		$this->arcExclusive = 1;
		$selectConf = $this->getSelectConf('', 1);
		// Finding maximum and minimum values:
		$selectConf['selectFields'] = 'max(datetime) as maxval, min(datetime) as minval';
		$res = $this->cObj->exec_getQuery('tt_news', $selectConf);
		$row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		if ($row['minval'] || $row['maxval']) {
			// if ($row['minva
[...]
OITEMS###'));
			$content = $this->cObj->substituteMarkerArrayCached($noItemsMsg, $markerArray);
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:5249;s:13:"content_lines";i:119;s:6:"atLine";i:360;}i:13;a:7:{s:6:"header";s:26:"function displaySingle() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:133:"

generates the single view of a news article. Is also used when displaying single records
with the 'insert records' content element
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"html-code for a single news item";}}s:7:"content";a:2:{i:0;s:507:"		$singleWhere = 'tt_news.uid=' . intval($this->tt_news_uid);
		$singleWhere .= ' AND type=0' . $this->enableFields; // type=0->only real news.
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('*', 'tt_news', $singleWhere);
		$row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		// get the translated record if the content language is not the default language
		if ($GLOBALS[
[...]
his->pi_getLL('noNewsIdMsg'), $this->conf['noNewsIdMsg_stdWrap.']);
			$content .= $noNewsIdMsg;
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2268;s:13:"content_lines";i:46;s:6:"atLine";i:486;}i:15;a:7:{s:6:"header";s:24:"function displayList() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:341:"

Display LIST,LATEST or SEARCH
Things happen: determine the template-part to use, get the query parameters (add where if search was performed),
exec count query to get the number of results, check if a browsebox should be displayed,
get the general Markers for each item and fill the content array, check if a browsebox should be displayed
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"html-code for the plugin content";}}s:7:"content";a:2:{i:0;s:507:"		$theCode = $this->theCode;

		$where = '';
		$content = '';
		switch ($theCode) {
			case 'LATEST':
			$prefix_display = 'displayLatest';
			$templateName = 'TEMPLATE_LATEST';
			if (!$this->conf['displayArchivedInLatest']) { // if this is set, latest will do the same as list
				$this->arcExclusive = -1; // Only latest, non archive news
			}
			$this->config['limit'] = 
[...]
cObj->stdWrap($this->pi_getLL('noNewsToListMsg'), $this->conf['noNewsToListMsg_stdWrap.']);
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:11083;s:13:"content_lines";i:240;s:6:"atLine";i:541;}i:17;a:7:{s:6:"header";s:67:"function getListContent($itemparts, $selectConf, $prefix_display) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:79:"

get the content for a news item NOT displayed as single item (List & Latest)
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"$itemparts : parts of the html template";}i:1;a:2:{i:0;s:5:"array";i:1;s:42:"$selectConf : quety parameters in an array";}i:2;a:2:{i:0;s:6:"string";i:1;s:42:"$prefix_display : the part of the TS-setup";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:31:"$itemsOut: itemlist as htmlcode";}}s:7:"content";a:2:{i:0;s:507:"		$res = $this->cObj->exec_getQuery('tt_news', $selectConf); //get query for list contents
		$itemsOut = '';
		$itempartsCount = count($itemparts);

		$cc = 0;
		// Getting elements
		while ($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {
			$wrappedSubpartArray = array();

			if ($GLOBALS['TSFE']->sys_language_content) {
				$row = $GLOBALS['TSFE']->sys_page->getRec
[...]
ay(), $wrappedSubpartArray);
			$cc++;
			if ($cc == $this->config['limit']) {
				break;
			}
		}

		return $itemsOut;
	}

	";i:1;i:1;}s:12:"content_size";i:2996;s:13:"content_lines";i:59;s:6:"atLine";i:790;}i:19;a:7:{s:6:"header";s:47:"function getSelectConf($where, $noPeriod = 0) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:85:"

build the selectconf (array of query-parameters) to get the news items from the db
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"$where : where-part of the query";}i:1;a:2:{i:0;s:7:"integer";i:1;s:183:"$noPeriod : if this value exists the listing starts with the given 'period start' (pS). If not the value period start needs also a value for 'period lenght' (pL) to display something.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the selectconf for the display of a news item";}}s:7:"content";a:2:{i:0;s:507:"		// Get news
		$selectConf = Array();
		$selectConf['pidInList'] = $this->pid_list;
		// exclude latest from search
		$selectConf['where'] = '1=1 ' . ($this->theCode == 'LATEST'?'':$where);

	#	if ($GLOBALS['TSFE']->sys_language_content >= -1) {
			if ($this->sys_language_mode == 'strict' && $GLOBALS['TSFE']->sys_language_content) {
				// mode == 'strict': If a certain l
[...]
ctConf);
			}
		}
		// debug(array('select_conf',$this->piVars,$selectConf,$this->arcExclusive));
		return $selectConf;
	}

	";i:1;i:1;}s:12:"content_size";i:5613;s:13:"content_lines";i:98;s:6:"atLine";i:857;}i:21;a:7:{s:6:"header";s:27:"function initCategories() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:57:"

Getting all tt_news_cat categories into internal array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		// decide whether to look for categories only in the 'General record Storage page', or in the complete pagetree
		$confArr = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['tt_news']);
		if ($confArr['useStoragePid']) {
			$storagePid = $GLOBALS['TSFE']->getStorageSiterootPids();
			$addWhere = ' AND tt_news_cat.pid IN (' . $storagePid['_STORAGE_PID'] . ')';
	
[...]
_pid'],
					'catid' => $row['uid_foreign']);
			} else {
				$this->categories['0'][$row['uid']] = $catTitle;
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1458;s:13:"content_lines";i:33;s:6:"atLine";i:961;}i:23;a:7:{s:6:"header";s:30:"function generatePageArray() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:67:"

Generates an array,->pageArray of the pagerecords from->pid_list
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:307:"		// Get pages (for category titles)
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('title,uid,author,author_email', 'pages', 'uid IN (' . $this->pid_list . ')');
		$this->pageArray = array();
		while ($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {
			$this->pageArray[$row['uid']] = $row;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:307;s:13:"content_lines";i:8;s:6:"atLine";i:1000;}i:25;a:7:{s:6:"header";s:70:"function getItemMarkerArray ($row, $textRenderObj = 'displaySingle') {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:53:"

Fills in the markerArray with data for a news item
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$row : result row for a news item";}i:1;a:2:{i:0;s:5:"array";i:1;s:51:"$textRenderObj : conf vars for the current template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:33:"$markerArray: filled marker array";}}s:7:"content";a:2:{i:0;s:507:"		// get config for current template part:
		$lConf = $this->conf[$textRenderObj . '.'];
		$this->local_cObj->start($row, 'tt_news');

		$markerArray = array();
		// get image markers
		$markerArray = $this->getImageMarkers($markerArray, $row, $lConf, $textRenderObj);

		$markerArray['###NEWS_UID###'] = $row['uid'];
		// show language label and/or flag
		$markerArray['###N
[...]
kerArrayFunc']) {
			$markerArray = $this->userProcess('itemMarkerArrayFunc', $markerArray);
		}

		return $markerArray;
	}
	";i:1;i:1;}s:12:"content_size";i:7115;s:13:"content_lines";i:137;s:6:"atLine";i:1016;}i:27;a:7:{s:6:"header";s:56:"function getCatMarkerArray($markerArray, $row, $lConf) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:46:"

Fills in the Category markerArray with data
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$markerArray : partly filled marker array";}i:1;a:2:{i:0;s:5:"array";i:1;s:33:"$row : result row for a news item";}i:2;a:2:{i:0;s:5:"array";i:1;s:51:"$lConf : configuration for the current templatepart";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"$markerArray: filled markerarray";}}s:7:"content";a:2:{i:0;s:507:"		// clear the category text and image markers if the news item has no categories
		$markerArray['###NEWS_CATEGORY_IMAGE###'] = '';
		$markerArray['###NEWS_CATEGORY###'] = '';
		$markerArray['###TEXT_CAT###'] = '';
		$markerArray['###TEXT_CAT_LATEST###'] = '';
		$markerArray['###CATWRAP_B###'] = '';
		$markerArray['###CATWRAP_E###'] = '';

		if (isset($this->categories[$ro
[...]
f ($this->theCode == 'XML') {
				$markerArray['###NEWS_CATEGORY###'] = $news_category;
			}
		}

		return $markerArray;
	}
	";i:1;i:1;}s:12:"content_size";i:5549;s:13:"content_lines";i:91;s:6:"atLine";i:1162;}i:29;a:7:{s:6:"header";s:70:"function getImageMarkers($markerArray, $row, $lConf, $textRenderObj) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:134:"

Fills the image markers with data. if a userfunction is given in "imageMarkerFunc",
the marker Array is processed by this function.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$markerArray : partly filled marker array";}i:1;a:2:{i:0;s:5:"array";i:1;s:33:"$row : result row for a news item";}i:2;a:2:{i:0;s:5:"array";i:1;s:51:"$lConf : configuration for the current templatepart";}i:3;a:2:{i:0;s:6:"string";i:1;s:45:"$textRenderObj : name of the template subpart";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"$markerArray: filled markerarray";}}s:7:"content";a:2:{i:0;s:507:"		// overwrite image sizes from TS with the values from the content-element if they exist.
		if ($this->config['FFimgH']||$this->config['FFimgW']) {
			$lConf['image.']['file.']['maxW'] = $this->config['FFimgW'];
			$lConf['image.']['file.']['maxH'] = $this->config['FFimgH'];
		}

		if ($this->conf['imageMarkerFunc']) {
			$markerArray = $this->userProcess('imageMarkerFunc
[...]
NEWS_IMAGE###'] = $this->local_cObj->wrap(trim($theImgCode), $lConf['imageWrapIfAny']);
			}
		}
		return $markerArray;
	}

	";i:1;i:1;}s:12:"content_size";i:1801;s:13:"content_lines";i:48;s:6:"atLine";i:1264;}i:31;a:7:{s:6:"header";s:27:"function getRelated($uid) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:84:"

Find related news records, add links to them and wrap them with stdWraps from TS.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:34:"$uid : it of the current news item";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"html code for the related news list";}}s:7:"content";a:2:{i:0;s:507:"		$select_fields = 'uid,title,short,datetime,archivedate,type,page,ext_url';
		$lConf = $this->conf['getRelatedCObject.'];
		if ($lConf['groupBy']) {
			$groupBy = trim($lConf['groupBy']);
		}
		if ($lConf['orderBy']) {
			$orderBy = trim($lConf['orderBy']);
		}
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery($select_fields, 'tt_news,tt_news_related_mm AS M', 'tt_news.uid=
[...]
s->conf['getRelatedCObject'], $this->conf['getRelatedCObject.'], 'getRelated');
			}
			return implode('', $lines);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2012;s:13:"content_lines";i:51;s:6:"atLine";i:1319;}i:33;a:7:{s:6:"header";s:43:"function userProcess($mConfKey, $passVar) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:44:"

Calls user function defined in TypoScript
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:69:"$mConfKey : if this value is empty the var $mConfKey is not processed";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:53:"$passVar : this var is processed in the user function";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:22:"the processed $passVar";}}s:7:"content";a:2:{i:0;s:243:"		if ($this->conf[$mConfKey]) {
			$funcConf = $this->conf[$mConfKey . '.'];
			$funcConf['parentObj'] = & $this;
			$passVar = $GLOBALS['TSFE']->cObj->callUserFunction($this->conf[$mConfKey], $funcConf, $passVar);
		}
		return $passVar;
	}

	";i:1;i:0;}s:12:"content_size";i:243;s:13:"content_lines";i:8;s:6:"atLine";i:1378;}i:35;a:7:{s:6:"header";s:35:"function spMarker($subpartMarker) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:113:"

returns the subpart name. if 'altMainMarkers.' are given this name is used instead of the default marker-name.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:54:"$subpartMarker : name of the subpart to be substituted";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"new name of the template subpart";}}s:7:"content";a:2:{i:0;s:404:"		$sPBody = substr($subpartMarker, 3, -3);
		$altSPM = '';
		if (isset($this->conf['altMainMarkers.'])) {
			$altSPM = trim($this->cObj->stdWrap($this->conf['altMainMarkers.'][$sPBody], $this->conf['altMainMarkers.'][$sPBody . '.']));
			$GLOBALS['TT']->setTSlogMessage('Using alternative subpart marker for \'' . $subpartMarker . '\': ' . $altSPM, 1);
		}

		return $altSPM?$altSPM:$subpartMarker;
	}

	";i:1;i:0;}s:12:"content_size";i:404;s:13:"content_lines";i:10;s:6:"atLine";i:1393;}i:37;a:7:{s:6:"header";s:27:"function searchWhere($sw) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:35:"

Generates a search where clause.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"$searchword(s)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:9:"querypart";}}s:7:"content";a:2:{i:0;s:99:"		$where = $this->cObj->searchWhere($sw, $this->searchFieldList, 'tt_news');
		return $where;
	}

	";i:1;i:0;}s:12:"content_size";i:99;s:13:"content_lines";i:4;s:6:"atLine";i:1410;}i:39;a:7:{s:6:"header";s:26:"function formatStr($str) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:56:"

Format string with general_stdWrap from configuration
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"$string to wrap";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:14:"wrapped string";}}s:7:"content";a:2:{i:0;s:152:"		if (is_array($this->conf['general_stdWrap.'])) {
			$str = $this->local_cObj->stdWrap($str, $this->conf['general_stdWrap.']);
		}
		return $str;
	}

	";i:1;i:0;}s:12:"content_size";i:152;s:13:"content_lines";i:6;s:6:"atLine";i:1421;}i:41;a:7:{s:6:"header";s:66:"function getLayouts($templateCode, $alternatingLayouts, $marker) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:30:"

Returns alternating layouts
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"$html code of the template subpart";}i:1;a:2:{i:0;s:7:"integer";i:1;s:29:"$number of alternatingLayouts";}i:2;a:2:{i:0;s:6:"string";i:1;s:53:"$name of the content-markers in this template-subpart";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:41:"html code for alternating content markers";}}s:7:"content";a:2:{i:0;s:274:"		$out = array();
		for($a = 0; $a < $alternatingLayouts; $a++) {
			$m = '###' . $marker . ($a?'_' . $a:'') . '###';
			if (strstr($templateCode, $m)) {
				$out[] = $GLOBALS['TSFE']->cObj->getSubpart($templateCode, $m);
			} else {
				break;
			}
		}
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:274;s:13:"content_lines";i:12;s:6:"atLine";i:1436;}i:43;a:7:{s:6:"header";s:25:"function getXmlHeader() {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:56:"

build the XML header (array of markers to substitute)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"the filled XML header markers";}}s:7:"content";a:2:{i:0;s:507:"		$markerArray = array();

		$markerArray['###SITE_TITLE###'] = $this->conf['displayXML.']['xmlTitle'];
		$markerArray['###SITE_LINK###'] = $this->config['siteUrl'];
		$markerArray['###SITE_DESCRIPTION###'] = $this->conf['displayXML.']['xmlDesc'];
		$markerArray['###SITE_LANG###'] = $this->conf['displayXML.']['xmlLang'];
		$markerArray['###IMG###'] = t3lib_div::getIndpEnv(
[...]
]['xmlCopyright'] . '</copyright>';
		} else {
			$markerArray['###NEWS_COPYRIGHT###'] = '';
		}

		return $markerArray;
	}
	";i:1;i:1;}s:12:"content_size";i:2253;s:13:"content_lines";i:49;s:6:"atLine";i:1454;}i:45;a:4:{s:6:"header";s:25:"function cleanXML($str) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:321:"

cleans the content for rss feeds. removes '&nbsp;' and '?;' (dont't know if the scond one matters in real-life).
The rest of the cleaning/character-conversion is done by the stdWrap functions htmlspecialchars,stripHtml and csconv.
For details see http://typo3.org/documentation/document-library/doc_core_tsref/stdWrap/
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:26:"$str: inputstring to clean";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"the cleaned string";}}s:6:"atLine";i:1512;}i:47;a:7:{s:6:"header";s:62:"function getNewsSubpart($myTemplate, $myKey, $row = Array()) {";s:11:"parentClass";s:9:"tx_ttnews";s:4:"cDat";a:3:{s:4:"text";s:107:"

Returns a subpart from the input content stream.
Enables pre-/post-processing of templates/templatefiles
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"$Content stream, typically HTML template content.";}i:1;a:2:{i:0;s:6:"string";i:1;s:49:"$Marker string, typically on the form "###...###"";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$Optional: the active row of data - if available";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"The subpart found, if found.";}}s:7:"content";a:2:{i:0;s:271:"		return ($this->cObj->getSubpart($myTemplate, $myKey));
	}
}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/tt_news/pi/class.tx_ttnews.php']) {
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/tt_news/pi/class.tx_ttnews.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:271;s:13:"content_lines";i:9;s:6:"atLine";i:1529;}}s:10:"usageCount";a:24:{s:12:"H_d2aaf0df34";a:2:{s:24:"_searchtime_milliseconds";d:57;s:15:"_functionHeader";s:38:"class tx_ttnews extends tslib_pibase {";}s:12:"H_ca02b9b6c2";a:2:{s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:44:"function main_xmlnewsfeed($content, $conf) {";}s:12:"H_0ca196d7ff";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:29:"function getStoriesResult() {";}s:12:"H_2199b34fe8";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:22:"function init($conf) {";}s:12:"H_6183d7dab8";a:2:{s:24:"_searchtime_milliseconds";d:2;s:15:"_functionHeader";s:37:"function main_news($content, $conf) {";}s:12:"H_92f04ed43a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:8;s:15:"_functionHeader";s:28:"function newsArchiveMenu() {";}s:12:"H_d044cf1d7a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:8;s:15:"_functionHeader";s:26:"function displaySingle() {";}s:12:"H_036241a4e5";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:7;s:15:"_functionHeader";s:24:"function displayList() {";}s:12:"H_f13c3f6c62";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:14;s:15:"_functionHeader";s:67:"function getListContent($itemparts, $selectConf, $prefix_display) {";}s:12:"H_f04f9ef439";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:12;s:15:"_functionHeader";s:47:"function getSelectConf($where, $noPeriod = 0) {";}s:12:"H_6930b10610";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:27:"function initCategories() {";}s:12:"H_9244121a6c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:6;s:15:"_functionHeader";s:30:"function generatePageArray() {";}s:12:"H_1f2295666d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:15;s:15:"_functionHeader";s:70:"function getItemMarkerArray ($row, $textRenderObj = 'displaySingle') {";}s:12:"H_3f89c1c5dd";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:19;s:15:"_functionHeader";s:56:"function getCatMarkerArray($markerArray, $row, $lConf) {";}s:12:"H_572e289592";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:18;s:15:"_functionHeader";s:70:"function getImageMarkers($markerArray, $row, $lConf, $textRenderObj) {";}s:12:"H_68772fb954";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:16;s:15:"_functionHeader";s:27:"function getRelated($uid) {";}s:12:"H_1ea0c12272";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:18;s:15:"_functionHeader";s:43:"function userProcess($mConfKey, $passVar) {";}s:12:"H_d5ee0650c0";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:9;s:5:"TOTAL";i:9;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:9;s:5:"TOTAL";i:9;}s:24:"_searchtime_milliseconds";d:12;s:15:"_functionHeader";s:35:"function spMarker($subpartMarker) {";}s:12:"H_a7324edcde";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:21;s:15:"_functionHeader";s:27:"function searchWhere($sw) {";}s:12:"H_e91540d1bf";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:4;s:5:"TOTAL";i:4;}s:24:"_searchtime_milliseconds";d:15;s:15:"_functionHeader";s:26:"function formatStr($str) {";}s:12:"H_1a163a3fcc";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:10;s:15:"_functionHeader";s:66:"function getLayouts($templateCode, $alternatingLayouts, $marker) {";}s:12:"H_842bb2c03d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:15;s:15:"_functionHeader";s:25:"function getXmlHeader() {";}s:12:"H_bb579935e5";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:16;s:15:"_functionHeader";s:25:"function cleanXML($str) {";}s:12:"H_63b708c25b";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:14:"MD5_6cdbd68339";a:3:{s:8:"fileName";s:22:"pi/class.tx_ttnews.php";s:11:"objectUsage";i:13;s:5:"TOTAL";i:13;}s:24:"_searchtime_milliseconds";d:13;s:15:"_functionHeader";s:62:"function getNewsSubpart($myTemplate, $myKey, $row = Array()) {";}}}}}